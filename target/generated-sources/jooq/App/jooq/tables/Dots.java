/*
 * This file is generated by jOOQ.
 */
package App.jooq.tables;


import App.jooq.Keys;
import App.jooq.Public;
import App.jooq.tables.records.DotsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dots extends TableImpl<DotsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dots</code>
     */
    public static final Dots DOTS = new Dots();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DotsRecord> getRecordType() {
        return DotsRecord.class;
    }

    /**
     * The column <code>public.dots.Id</code>.
     */
    public final TableField<DotsRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('\"dots_Id_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dots.iduser</code>.
     */
    public final TableField<DotsRecord, Integer> IDUSER = createField(DSL.name("iduser"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dots.X</code>.
     */
    public final TableField<DotsRecord, Double> X = createField(DSL.name("X"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.dots.Y</code>.
     */
    public final TableField<DotsRecord, Double> Y = createField(DSL.name("Y"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.dots.R</code>.
     */
    public final TableField<DotsRecord, Long> R = createField(DSL.name("R"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.dots.IsArea</code>.
     */
    public final TableField<DotsRecord, Boolean> ISAREA = createField(DSL.name("IsArea"), SQLDataType.BOOLEAN, this, "");

    private Dots(Name alias, Table<DotsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dots(Name alias, Table<DotsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dots</code> table reference
     */
    public Dots(String alias) {
        this(DSL.name(alias), DOTS);
    }

    /**
     * Create an aliased <code>public.dots</code> table reference
     */
    public Dots(Name alias) {
        this(alias, DOTS);
    }

    /**
     * Create a <code>public.dots</code> table reference
     */
    public Dots() {
        this(DSL.name("dots"), null);
    }

    public <O extends Record> Dots(Table<O> child, ForeignKey<O, DotsRecord> key) {
        super(child, key, DOTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DotsRecord> getPrimaryKey() {
        return Keys.DOTS_PKEY;
    }

    @Override
    public List<ForeignKey<DotsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOTS__DOTS_IDUSER_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.DOTS__DOTS_IDUSER_FKEY);

        return _users;
    }

    @Override
    public Dots as(String alias) {
        return new Dots(DSL.name(alias), this);
    }

    @Override
    public Dots as(Name alias) {
        return new Dots(alias, this);
    }

    @Override
    public Dots as(Table<?> alias) {
        return new Dots(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dots rename(String name) {
        return new Dots(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dots rename(Name name) {
        return new Dots(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dots rename(Table<?> name) {
        return new Dots(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Double, Double, Long, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super Double, ? super Double, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super Double, ? super Double, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
